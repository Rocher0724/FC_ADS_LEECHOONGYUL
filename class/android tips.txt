만들면서 써가는 안드로이드 팁 

* 플로팅 버튼 라이브러리 
	compile 'com.github.clans:fab:1.6.4'

	이거 깔고 해줘야될게 많은데 일단 res폴더에 anim 이랑 ,drawable 폴더를 만들어야 하고 몇가지 파일들을 집어넣어야 한다.
	values - styles.xml 에 몇가지를 추가하여야 한다.  (github 참조)

		--- xml 사용 예시 ---

		// FAB 메뉴 이며 클릭시 FAB 3개가 나온다.
        <com.github.clans.fab.FloatingActionMenu
        android:id="@+id/fabMenu"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        fab:menu_labels_style="@style/MenuButtonsSmall.Blue"
        fab:menu_labels_showAnimation="@anim/jump_from_down"
        fab:menu_labels_hideAnimation="@anim/jump_to_down"
        fab:menu_animationDelayPerItem="0"
        fab:menu_shadowColor="#444"
        fab:menu_colorNormal="#35cdd5"
        fab:menu_colorPressed="#2fb8c0"
        fab:menu_colorRipple="#259197"
        android:layout_above="@+id/tab"
        android:layout_alignParentRight="true"
        android:layout_alignParentEnd="true">

        <com.github.clans.fab.FloatingActionButton
            android:id="@+id/fabAcc"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:src="@drawable/ic_aa"
            fab:fab_label="계좌 메모"
            style="@style/MenuButtonsSmall.Blue" />

        <com.github.clans.fab.FloatingActionButton
            android:id="@+id/fabId"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:src="@drawable/ic_aa"
            fab:fab_label="아이디 메모"
            style="@style/MenuButtonsSmall.Blue" />

        <com.github.clans.fab.FloatingActionButton
            android:id="@+id/fabText"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:src="@drawable/ic_aa"
            fab:fab_label="메모 추가"
            style="@style/MenuButtonsSmall.Blue" />
    </com.github.clans.fab.FloatingActionMenu>




* 액티비티에서 플로팅 버튼(Floating action button) 사용할 때 editText 에서 자동으로 플로팅 버튼 올라오게 / 안 올라오게 하는 것 
 : 	manifest 에서 각 activity에 설정 해줘야 하는데 
 1. 프래그먼트는 아래 기본 설정이 adjustResize 이다. 프래그먼트에 FAB를 띄울때는 자동으로 올라온다고 한다.
 2. 액티비티는 아래 기본 설정이 adjustNoting 이다. 액티비티에 FAB를 띄우면 자동으로 안올라온다.
 	android:windowSoftInputMode="adjustNothing" 라고 하면 안올라온다.
 	android:windowSoftInputMode="adjustResize" 라고 하면 키보드가 올라올 때 activity 크기가 리사이즈 된다. 


* 액티비티에서 띄운 프래그먼트속에 recyclerView를 띄워놓고 다른 액티비티를 갔다가 돌아왔을 때 recyclerView를 업데이트 시키려면 startActivityforResult를 써야한다.

* recyclerView에서 선택한 아이템을 삭제할 경우 삭제한뒤 recyclerView와 관련 adapter를 리셋해줘야 하는데 
	adapter에는 해당 recyclerView가 실행되는 activity의 context를 받아오기 마련이므로 해당 context를 activity로 파싱해서 사용한다
	예) ExampleActivity exam = (ExampleActivity) context;  로 하면 현재 사용되고 있는 액티비티의 context를 활용할 수 있게된다.
		exam.~~ 를 통해서 ExampleActivity의 메소드도 활용 가능.

	덧 : ExampleActivity exam = new ExampleActivity(); 를 사용하여 인스턴스를 생성하면 null 포인트로 될 수가 있다. 


* edittext 자동 포커싱 되는것 막기 
	XML 파일 내부 최상단 레이아웃에 아래부분을 추가한다.
	android:focusable="true"
	android:focusableInTouchMode="true"

* edittext 여러줄 칠수있게 바꾸기
	XML 에서 edittext 에 android:inputType="textMultiLine" 옵션 추가하면된다.

*edittext 자동포커싱되게하기 
	edittext가 세개인 뷰를 짜는데 실행시 맨 위가 아니라 가운데꺼에 포커싱이 잡혔다. 
	제일 위에 edittext 에다가 이런식으로 해주었다.
	EditText editTextTop = (EditText) findViewById(R.id.editTextTop);
    editTextTop.requestFocus();

* 위젯 모서리 둥글게만들기
	res/drawable/rounded.xml 를 추가 하여 사용한다. 

	--- 내용 ---

	<?xml version="1.0" encoding="utf-8"?>
	<!--  res/drawable/rounded.xml -->
	<shape xmlns:
		android="http://schemas.android.com/apk/res/android"
		android:shape="rectangle" android:padding="10dp">
		<solid android:color="#ffffff"/>
		<corners
		    android:bottomRightRadius="5dp"
		    android:bottomLeftRadius="5dp"
		    android:topLeftRadius="5dp"
		    android:topRightRadius="5dp" />
	</shape>
	-------------

	이렇게 추가한후 모서리를 둥글게 만들고 싶은 위젯이나 액티비티에 android:background="@drawable/rounded" 를 주면 된다. 


* 화면 크기를 받아오는 방법 
    DisplayMetrics matrics = getResources().getDisplayMetrics();
    matrics.widthPixels 는 화면 너비를 int로 반환한다. 
    matrics.heightPixels 는 화면 높이를 int로 반환한다. 


* 파일 디렉터리 구분자는 시스템마다 다르다
    File.separator 를 사용한다. (String 반환)


* ddms



















* 파일 가져오기 유틸리티 

```

    // asset에 있는 파일을 쓰기 가능한 internal Storage로 복사한다.
    // Internal storage의 경로 구조는  /data/data/패키지명명

    final static String FILE_NAME= "파일이름";
    public void assetToDisk(String filename) { // filename : 경로 + 파일이름

         // 스트림 선언
         // try문 안쪽에 선언을 하게되면 exception 발생시 close함수를 호출할 방법이 없다. 그래서 밖에 선언한다.
        InputStream is = null;
        BufferedInputStream bis = null;
        FileOutputStream fos = null;
        BufferedOutputStream bos = null;

        try {
            // 1. assets 에 있는 파일을 filename으로 읽어온다.
            AssetManager manager = getAssets();
            // 2. 파일 스트림 생성
            is = manager.open(filename);

            // 3. 버퍼 스트림으로 래핑(한번에 여러개의 데이터를 가져오기 위한 래핑)
            bis = new BufferedInputStream(is);

            // 쓰기위한 준비작업업
            // 4. 저장할 위치에 파일이 없으면 생성.
            String targetFile = getFullPath(filename);
            File file = new File(targetFile);
            if (!file.exists()) {
                try {
                    file.createNewFile();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            // 5. 쓰기 스트림을 생성
            fos = new FileOutputStream(file);

            // 6. 버퍼 스트림으로 동시에 여러개의 데이터를 쓰기위한 래핑
            bos = new BufferedOutputStream(fos);
              // 읽어올 데이터를 담아둘 변수
            int read = -1; // 모두 읽어오면 -1이 저장된다.
              // 한번에 읽을 버퍼의 크기를 지정
            byte buffer[] = new byte[1024];
            // 읽어올 데이터가 없을 때 까지 반복문을 돌면서 읽고 쓴다.
            while ((read = bis.read(buffer, 0, 1024)) != -1) {
                bos.write(buffer, 0, read);
                  // AsyncTask 의 onProgressbar
                publishProgress(read);
            }
            // 남아있는 데이터를 다 흘려보낸다.
            bos.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try { // 사용한 순서 역순으로 닫아준다. 제일먼저 사용한걸 제일 나중에 닫아줌.
                // 물론 스트럼만 닫아도 닫히긴 한다.
                if (bos != null) bos.close();
                if (fos != null) fos.close();
                if (bis != null) bis.close();
                if (is != null) is.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // 파일의 전체 경로를 만들어주는 함수
     private String getFullPath(String filename) {
        // /data/data/패키지명/files + / + 파일명  을 리턴한다.
        return getFilesDir().getAbsolutePath() + File.separator + filename;
    }

```


* 타이틀바 없애기 
    방법은 여러가지이다.
    res - values - styles.xml 에 해당 아이템을 추가한다.
```
        <!-- 타이틀바 없애기 -->
        <item name="windowNoTitle">true</item>
        <!--스테이터스바 없애기-->
        <item name="android:windowFullscreen">true</item>


```

* 서비스 사용시
    서비스는 4대 컴포넌트 이기 때문에 Manifest에 추가해줘야한다. 혹시 그냥 java class 로 생성했다면 추가해줘야 사용할 수 있다.

* 안드로이드 OS가 앱을 죽일경우 onDestroy가 호출되지 않을 수가 있다. 서비스 내에서 onTrimMemory나 onLowMemory를 사용하면 메모리가 부족할때 불러오는 메모리인데 이걸 사용해서 종료해주는 방법도 있다.

* 데몬서비스는 stopSelf(); 하면 죽는다.

* TabLayout 가로축 스크롤하기 
    tabLayout.setTabMode(TabLayout.MODE_SCROLLABLE); 을 추가하면된다. 이러면 tab width가 자동으로 wrap content가 된다. 

* 국가별 언어설정하기 
    res - values-ko 폴더를 만들고 values - strings.xml 파일을 복붙한다.
    붙여넣기 된 values-ko 폴더안에 strings.xml 를 한글로 고친다.
    다시 실행하면 한글로 바뀜!.